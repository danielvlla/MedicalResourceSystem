/*

Panel which uses a JTable to show all doctors registered in the system
Administrator can delete any of the doctors shown

By Daniel Vella

*/

package gui;

import defaultpackage.Doctor;

import defaultpackage.Surgeon;
import managers.DoctorManager;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class ViewAllDoctorsPanel extends javax.swing.JPanel 
   {
   
   private Doctor[] doctors_;
   private DefaultTableModel model_;
   private String name_;
   
   public ViewAllDoctorsPanel() 
      {
      
      initComponents();
      setUpTable();
         
      }
   
   private void setUpTable()
      {
      
      viewDocsTable_.setAutoCreateRowSorter(true);  
      viewDocsTable_.setShowGrid(true);
      viewDocsTable_.setRowHeight(40);
      viewDocsTable_.getTableHeader().setEnabled(false);
      
      }
   
   private void fillTable()
      {
         
      model_ = (DefaultTableModel) viewDocsTable_.getModel();
      model_.setRowCount(0);

      Object rowData[] = new Object[6];

      for (Doctor doctor : doctors_)
         {
            
         if (doctor != null)
            {
           
            if ("Surgery".equals(doctor.getDiscipline()))
               {
               
               rowData[0] = doctor.getName();
               rowData[1] = doctor.getDiscipline();
               rowData[2] = doctor.getContactMethod();
               rowData[3] = doctor.getContactDetails();
               rowData[4] = doctor.getAddress();
               rowData[5] = (((Surgeon) doctor).getCertificate().getIssueDate()).toString();
               
               }
            else 
               {
               
               rowData[0] = doctor.getName();
               rowData[1] = doctor.getDiscipline();
               rowData[2] = doctor.getContactMethod();
               rowData[3] = doctor.getContactDetails();
               rowData[4] = doctor.getAddress();
               rowData[5] = null;
               
               }
           
            model_.addRow(rowData); 
            
            }

         }
                
      }

   /**
    * This method is called from within the constructor to initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is always
    * regenerated by the Form Editor.
    */
   @SuppressWarnings("unchecked")
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents()
   {
      java.awt.GridBagConstraints gridBagConstraints;

      backgroundViewDocs_ = new javax.swing.JPanel();
      viewDocsTitle_ = new javax.swing.JLabel();
      jScrollPane1_ = new javax.swing.JScrollPane();
      viewDocsTable_ = new javax.swing.JTable();
      refreshButton_ = new javax.swing.JButton();
      deleteButton_ = new javax.swing.JButton();
      guideLabel_ = new javax.swing.JLabel();

      setBackground(new java.awt.Color(255, 255, 255));
      setMinimumSize(new java.awt.Dimension(419, 609));

      backgroundViewDocs_.setBackground(new java.awt.Color(255, 255, 255));
      backgroundViewDocs_.setMinimumSize(new java.awt.Dimension(419, 609));
      backgroundViewDocs_.setLayout(new java.awt.GridBagLayout());

      viewDocsTitle_.setFont(new java.awt.Font("Lucida Grande", 0, 36)); // NOI18N
      viewDocsTitle_.setText("List of Doctors");
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 0;
      gridBagConstraints.gridy = 0;
      gridBagConstraints.gridwidth = 2;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
      gridBagConstraints.insets = new java.awt.Insets(50, 0, 50, 500);
      backgroundViewDocs_.add(viewDocsTitle_, gridBagConstraints);

      jScrollPane1_.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true));

      viewDocsTable_.setBackground(new java.awt.Color(247, 247, 247));
      viewDocsTable_.setModel(new javax.swing.table.DefaultTableModel(
         new Object [][]
         {

         },
         new String []
         {
            "Name", "Discipline", "Address", "Contact On", "Contact ID", "Cert. Issue Date"
         }
      )
      {
         Class[] types = new Class []
         {
            java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
         };
         boolean[] canEdit = new boolean []
         {
            false, false, false, false, false, false
         };

         public Class getColumnClass(int columnIndex)
         {
            return types [columnIndex];
         }

         public boolean isCellEditable(int rowIndex, int columnIndex)
         {
            return canEdit [columnIndex];
         }
      });
      viewDocsTable_.setRowSorter(null);
      viewDocsTable_.getTableHeader().setReorderingAllowed(false);
      jScrollPane1_.setViewportView(viewDocsTable_);

      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 0;
      gridBagConstraints.gridy = 3;
      gridBagConstraints.gridwidth = 2;
      gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
      backgroundViewDocs_.add(jScrollPane1_, gridBagConstraints);

      refreshButton_.setText("Refresh Table");
      refreshButton_.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            refreshButton_ActionPerformed(evt);
         }
      });
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 0;
      gridBagConstraints.gridy = 2;
      gridBagConstraints.insets = new java.awt.Insets(20, 0, 30, 0);
      backgroundViewDocs_.add(refreshButton_, gridBagConstraints);

      deleteButton_.setBackground(new java.awt.Color(255, 51, 0));
      deleteButton_.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
      deleteButton_.setForeground(new java.awt.Color(255, 0, 0));
      deleteButton_.setText("Delete Selected Item");
      deleteButton_.setContentAreaFilled(false);
      deleteButton_.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            deleteButton_ActionPerformed(evt);
         }
      });
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 1;
      gridBagConstraints.gridy = 2;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
      gridBagConstraints.insets = new java.awt.Insets(20, 50, 30, 0);
      backgroundViewDocs_.add(deleteButton_, gridBagConstraints);

      guideLabel_.setFont(new java.awt.Font("Lucida Grande", 2, 10)); // NOI18N
      guideLabel_.setForeground(new java.awt.Color(153, 153, 153));
      guideLabel_.setText("Press Refresh Table to Load Doctors // Select a Doctor and Press Delete Selected Item to Delete from System");
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 0;
      gridBagConstraints.gridy = 1;
      gridBagConstraints.gridwidth = 2;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
      gridBagConstraints.insets = new java.awt.Insets(20, 0, 20, 0);
      backgroundViewDocs_.add(guideLabel_, gridBagConstraints);

      javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
      this.setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(backgroundViewDocs_, javax.swing.GroupLayout.DEFAULT_SIZE, 865, Short.MAX_VALUE)
            .addGap(26, 26, 26))
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addComponent(backgroundViewDocs_, javax.swing.GroupLayout.DEFAULT_SIZE, 669, Short.MAX_VALUE)
      );
   }// </editor-fold>//GEN-END:initComponents

   private void refreshButton_ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButton_ActionPerformed
      
      if (DoctorManager.isEmptyArray())
         {
         
         JOptionPane.showMessageDialog(null, "No Doctors Registered Yet", "Oops", JOptionPane.INFORMATION_MESSAGE);
         
         }
      else 
         {
         
         doctors_ = DoctorManager.getAllDoctors();
         fillTable();
         
         }
      
   }//GEN-LAST:event_refreshButton_ActionPerformed

   private void deleteButton_ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButton_ActionPerformed
      
      int selectedRowIndex = viewDocsTable_.getSelectedRow();

      if (selectedRowIndex == -1)
         {
            
         JOptionPane.showMessageDialog(null, "No Doctor has been selected", "Oops", JOptionPane.WARNING_MESSAGE);
         
         }
      
      else 
         {
         
         try
            {
       
            name_ = model_.getValueAt(selectedRowIndex, 0).toString();
            DoctorManager.remove(name_);
            model_.removeRow(selectedRowIndex);
            
            }
         catch (NullPointerException e)
            {
            
            System.out.println("Nothing Selected to Delete");
         
            }   
            
         }             
    
   }//GEN-LAST:event_deleteButton_ActionPerformed


   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JPanel backgroundViewDocs_;
   private javax.swing.JButton deleteButton_;
   private javax.swing.JLabel guideLabel_;
   private javax.swing.JScrollPane jScrollPane1_;
   private javax.swing.JButton refreshButton_;
   private javax.swing.JTable viewDocsTable_;
   private javax.swing.JLabel viewDocsTitle_;
   // End of variables declaration//GEN-END:variables
}
